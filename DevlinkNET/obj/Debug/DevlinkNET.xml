<?xml version="1.0"?>
<doc>
<assembly>
<name>
DevlinkNET
</name>
</assembly>
<members>
<member name="T:DelinkNET.DevLinkNet.CallLogType">
 <summary>
 Set call Log Event Type Base or Advanced
 </summary>
 <remarks></remarks>
 
</member>
<member name="T:DelinkNET.DevLinkNet.Connection_Parameter.Connection_Status_Paramenter">
 <summary>
 Define Argument for Connection Status Event
 </summary>
 <remarks></remarks>
</member>
<member name="T:DelinkNET.DevLinkNet.CommsEvent_Enum.CommsEvent_State">
 <summary>
 Define Comms Event Return Value
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CommsEvent_Enum.CommsEvent_State.DEVLINK_COMMS_OPERATIONAL">
 <summary>
 Communications established. This occurs either after the
 initial call to DLOpen(), or after the system unit has come
 back on-line after being powered off or rebooted.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CommsEvent_Enum.CommsEvent_State.DEVLINK_COMMS_NORESPONSE">
 <summary>
 No response from system unit. This occurs either after the
 initial call to DLOpen(), or if the system unit is powered off
 or rebooted. It can also occur if network problems prevent
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CommsEvent_Enum.CommsEvent_State.DEVLINK_COMMS_REJECTED">
 <summary>
 Reserved for future use
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CommsEvent_Enum.CommsEvent_State.DEVLINK_COMMS_MISSEDPACKETS">
 <summary>
 Packets were generated by the IP Office system unit, but
 were not received by DevLink. This can occur either
 because the IP Office system unit is under heavy load, or
 because the application using DevLink did not return from
 a callback quickly enough. Applications should ensure
 that they do not take more than 100 milliseconds to
 process events.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseUnallocatedNumber">
 <summary>
  The number is not in the dial plan
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseForceIdle">
 <summary>
 Force clear down unconditionally
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseUnregister">
 <summary>
 Indicate the operation is for unregistration procedure
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseBusy">
 <summary>
 The call target is busy
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseCallRejected">
 <summary>
 The call has not been permitted, e.g. call barring
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseNoChannel">
 <summary>
 There is no available external line
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseNetworkOOO">
 <summary>
 Problem with the external network
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseReminderFree">
 <summary>
 The call has returned because it was parked against a
 busy extension that is now free
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseReminderNoAns">
 <summary>
 The call has returned because it was not answered within
 the transfer return timeout
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseReminder">
 <summary>
 A held or parked call is returning due to a hold / park
 timeout
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseRedirect">
 <summary>
 The call has been redirected
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseCallBarred">
 <summary>
 The call was barred
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseForwardToVoicemail">
 <summary>
 The call has been forwarded to voicemail
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseAnsweredByOther">
 <summary>
 The call has been answered by someone else
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseNoAccountCode">
 <summary>
 The call has not been allowed because a valid account
 code has not been provided
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseTransfer">
 <summary>
 The call has been transferred
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseConferencingMove">
 <summary>
 The call has been placed into a conference
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseAppearanceCallSteal">
 <summary>
 The call was answered on an appearance button on
 another phone
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseBumpedCall">
 <summary>
 The call is no longer the primary call, i.e. it is now a waiting
 call
 </summary>
 <remarks></remarks>
</member>
<member name="F:DelinkNET.DevLinkNet.CallLogEvent_S_Enum.CauseCode.CMCauseR21CompatConfMove">
 <summary>
 The call has been placed into a conference
 </summary>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.AcallId">
 <summary>
 Call id for the A end of the call
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.BcallId">
 <summary>
 Call id for the B end of the call
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.Astate">
 <summary>
 State of the A end of the call. Valid numbers are:
 </summary>
 <value>
  0 Idle
  1 Ringing
  2 Connected
  3 Disconnected
  4 Suspending
  5 Suspended
  6 Resuming
  7 Dialling
  8 Dialled
  9 Local Dial
 10 Queued
 11 Parked
 12 Held
 13 Redialling
 </value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.Bstate">
 <summary>
 State of the B end of the call – see above for values. If there is
 no B end, this will be 0 (Idle)
 </summary>
 <value>
  0 Idle
  1 Ringing
  2 Connected
  3 Disconnected
  4 Suspending
  5 Suspended
  6 Resuming
  7 Dialling
  8 Dialled
  9 Local Dial
 10 Queued
 11 Parked
 12 Held
 13 Redialling
 </value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.Aconnected">
 <summary>
 0 indicates not connected to the switch (e.g. If receiving dialtone)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.AisMusic">
 <summary>
 Indicates whether the A end of the call is listening to music on
 hold
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.Bconnected">
 <summary>
 0 indicates not connected to the switch (e.g. If receiving dialtone)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.BisMusic">
 <summary>
 Indicates whether the B end of the call is listening to music on hold
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.Aname">
 <summary>
 Name of the A end of the call. The format of this string is:
 For extensions: Name (Number)
 For trunks: Line number
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.Bname">
 <summary>
 Name of the B end of the call. The format of this string is:
 For extensions: Name (Number)
 For trunks: Line number
 If there is no B end, this will be empty.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.Blist">
 <summary>
 List of possible targets for the call. Targets are separated by
 semicolons, and if there are more than four, the list is terminated
 after 4 elements with an ellipsis.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.AslotAchannel">
 <summary>
 Aslot is the slot number of the A side of the call and is the identify
 of the TDM trunk.
 Achannel is the channel number within the Aslot.
 The format of the string is "Number.Number".
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.BslotBchannel">
 <summary>
 Bslot is the slot number of the B side of the call and is the identify
 of the TDM trunk.
 Bchannel is the channel number within the Bslot.
 The format of the string is "Number.Number".
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.CalledPartyPresentation">
 <summary>
 This field contains two numbers: 1) an indicator of how the called
 party details should be presented, and 2) the type of data to be
 found in the called party number field.
 The format of the string is "Number.Number".
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.CalledPartyNumber">
 <summary>
 The identifier or number of the called party.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.CallingPartyPresentationType">
 <summary>
 This field contains two numbers: 1) an indicator of how the
 calling party details should be presented, and 2) the type of data
 to be found in the calling party number field.
 The format of the string is "Number.Number".
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.CallingPartyNumber">
 <summary>
 The identifier or number of the calling party.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.CalledSubAddress">
 <summary>
 The sub address of the called party.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.CallingSubAddress">
 <summary>
 The sub address of the calling party.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.DialledPartyType">
 <summary>
  The type of data to be found in the dialled party number field.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.DialledPartyNumber">
 <summary>
 The identifier or number of the dialled party.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.KeypadType">
 <summary>
  The type of data to be found in the keypad number field.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.KeypadNumber">
 <summary>
  String The dialled digits.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.RingAttemptCount">
 <summary>
 The number of times this call has been presented to a target.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.Cause">
 <summary>
 The reason the call is in it's current state. See the table below for
 further details.
 </summary>
 <value>
   0 CMCauseUnknown
   1 CMCauseUnallocatedNumber The number is not in the dial plan
   2 CMCauseForceIdle Force clear down unconditionally
   3 CMCauseUnregister Indicate the operation is for unregistration procedure
  16 CMCauseNormal
  17 CMCauseBusy The call target is busy
  18 CMCauseNoUserResponding
  21 CMCauseCallRejected The call has not been permitted, e.g. call barring
  31 CMCauseNormalUnspecified
  34 CMCauseNoChannel There is no available external line
  38 CMCauseNetworkOOO Problem with the external network
  88 CMCauseIncompatible
 113 CMCausePhoneInfo
 114 CMCauseReminderFree The call has returned because it was parked against a
     busy extension that is now free
 115 CMCauseReminderNoAns The call has returned because it was not answered within
 the transfer return timeout
 116 CMCauseE911Emergency
 117 CMCauseParked
 118 CMCauseUnParked
 119 CMCausePickup
 120 CMCauseReminder A held or parked call is returning due to a hold / park
     timeout
 121 CMCauseRedirect The call has been redirected
 122 CMCauseCallBarred The call was barred
 123 CMCauseForwardToVoicemail The call has been forwarded to voicemail
 124 CMCauseAnsweredByOther The call has been answered by someone else
 125 CMCauseNoAccountCode The call has not been allowed because a valid account
     code has not been provided
 126 CMCauseTransfer The call has been transferred
 127 CMCauseConferencingMove The call has been placed into a conference
 128 CMCauseRestrictedToPartner
 129 CMCauseHeldCall
 130 CMRingBackCheck
 131 CMCauseAppearanceCallSteal The call was answered on an appearance button on
     another phone
 132 CMCauseAppearanceBridgeInto
 133 CMCauseBumpedCall The call is no longer the primary call, i.e. it is now a waiting
     call
 134 CMCauseLineAppearanceCall
 135 CMCauseUnheldCall
 136 CMCauseReplaceCurrentCall
 137 CMCauseGlare
 138 CMCauseR21CompatConfMove The call has been placed into a conference
 </value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.VoicemailDisallow">
 <summary>
  1 if the call cannot divert to voice mail.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.SendingComplete">
 <summary>
  1 if overlap dialling is complete.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.CallTypeTransportType">
 <summary>
 This field contains two numbers: 1) call type, e.g. speech, video
 and 2) the transport type, 0=circuit, 2=packet.
 The format of the string is "Number.Number".
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.OwnerHuntGroupName">
 <summary>
 The name of the hunt group where the call is currently queued.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.OriginalHuntGroupName">
 <summary>
 The name of the hunt group where the call was originally
 targeted.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.OriginalUserName">
 <summary>
 The name of the user where the call was originally targeted.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.TargetHuntGroupName">
 <summary>
 The name of the hunt group where the call has been targeted at.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.TargetUserName">
 <summary>
 Name of user to which the call is being targeted.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.TargetRASName">
 <summary>
 The name of the internal port where the call is being targeted.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.IsInternalCall">
 <summary>
 1 the call is internal, otherwise 0.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.TimeStamp">
 <summary>
 The time the call was created (internal tick count).
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.ConnectedTime">
 <summary>
 The time the call was connected.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.RingTime">
 <summary>
 The time the call started ringing.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.ConnectedDuration">
 <summary>
 The duration the call has been connected or was connected for.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.RingDuration">
 <summary>
 The duration the call has been ringing or was ringing for.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.Locale">
 <summary>
 Locale identifier (same as the locale setting in Manager).
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.ParkSlotNumber">
 <summary>
 When the call is parked, the B end is undefined, and this field
 contains the park slot number.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.CallWaiting">
 <summary>
 1 if the call is a call waiting call
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.Tag">
 <summary>
 Contains the tag, which may be applied through TAPI, Voice
 Mail/Pro or SoftConsole.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.Transferring">
 <summary>
 Non-zero indicates that the call is being transferred.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.ServiceActive">
 <summary>
 Non-zero if the service is active.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.ServiceQuotaUsed">
 <summary>
 Non-zero if the service quota is used.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.ServiceQuotaTime">
 <summary>
 The service quota time.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.AccountCode">
 <summary>
 The account code of the call, if any
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_S.CallID">
 <summary>
 Unique call id
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_D.AcallId">
 <summary>
 Call id for the A end of the call
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_D.BcallId">
 <summary>
 Call id for the B end of the call
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_D.CallID">
 <summary>
 Unique call id
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_A.AcallId">
 <summary>
 Call id for the A end of the call
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_A.BcallId">
 <summary>
 Call id for the B end of the call
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.CallLogEvent_Type.CallLogEvent_A.CallID">
 <summary>
 Unique call id
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DelinkNET.DevLinkNet.CallLogEvent_Parameter.CallLog_S_Parameter">
 <summary>
 Parameter for Call Event Type S
 S events are sent whenever a call is first created, 
 and whenever any part of the call changes state.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DelinkNET.DevLinkNet.CallLogEvent_Parameter.CallLog_A_Parameter">
 <summary>
 Event for call Type A
 </summary>
 <remarks></remarks>
</member>
<member name="T:DelinkNET.DevLinkNet.CallLogEvent_Parameter.CallLog_D_Parameter">
 <summary>
 Event for call Type D
 </summary>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.Devlink.CallLogEventType">
 <summary>
 Set/Get Call Log Type
 </summary>
 <value>
 Base     = Raise only CallLog_Event
 
 Advanced = Split CallLog_Event in Type : A,D,S and raise specific Event
            Call A : Raise event CallLog_Event_A
            Call D : Raise event CallLog_Event_D
            Call S : Raise event CallLog_Event_S 
 
 BaseAndAdvanced = Raise Base and Advanced Events
 </value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DelinkNET.DevLinkNet.Devlink.IsConnect">
 <summary>
 Get connection Status
 </summary>
 <value>boolean</value>
 <returns>
 True = Connection is open
 False = Connection is closed
 </returns>
 <remarks></remarks>
</member>
<member name="E:DelinkNET.DevLinkNet.Devlink.Comms_Event">
 <summary>
 The COMMSEVENT callback is called by DevLink whenever the state 
 of the communication with the IP Office system unit changes.
 </summary>
 <param name="Source"></param>
 <param name="e">
 pbxh        = A number used to identify the system. This is the user-supplied parameter used to 
               connect to the IP Office system
 
 comms_state = A number indicating the state of the communications. See CommsEvent_Enum.CommsEvent_State
 
 parm1       = This value is only defined for: DEVLINK_COMMS_MISSEDPACKETS events, 
               in which case it indicates the number ofpackets dropped
 </param>
 <remarks></remarks>
</member>
<member name="E:DelinkNET.DevLinkNet.Devlink.CallLog_Event">
 <summary>
 The CALLLOGEVENT callback is called by DevLink to deliver a real-time (Delta2) event.
 </summary>
 <param name="source">Sender object</param>
 <param name="e"> Argument type CallLogEvent_Parameter.CallLog_Base_Parameter
 IpPbx = A number used to identify the system. This is the user-supplied parameter used to connect to the IP Office system
 LogInfo = Text string containing the event.
 Calls in IP Office are modelled as being a communications line between two end-points, called A and B respectively. An A
 end is always present, but a B end may or may not be present, depending on the state of the call (A and B are typically
 extensions or trunks, but they may also be connected to the voicemail system or parked).
 Three different types of real-time events are generated by DevLink. These are used to track the call throughout its'
 lifetime:
 
 S events
 S events give information on the status of a call. S events are generated when calls are first created, answered, or
   the status of a device involved in the call changes.
 
 D events
 D events are generated when the call is completed or abandoned. They indicate that the call no longer exists.
 
 A events
 A events are generated when one end of a call is connected to a line (such as an ISDN, QSig or VoIP line) and the IP
   Office decides to swap the A end and the B end of the call. Examples of when this may happen include:
          When a parked party hangs up
          When an outgoing call is transferred
          When a call is un-parked
         
 </param>
 <remarks></remarks>
</member>
<member name="E:DelinkNET.DevLinkNet.Devlink.CallLog_Event_A">
 <summary>
 A events indicate that the call ends have been swapped. This occurs, for example, when the originating extension
 unparks an external call. The format of an A event is very similar to that for a D event:
 </summary>
 <param name="source">Sender Object</param>
 <param name="e"> Argument type CallLogEvent_Parameter.CallLog_A_Parameter
 IpPbx = A number used to identify the system. This is the user-supplied parameter used to connect to the IP Office system
 LogInfo = CallLogEvent_Type.CallLogEvent_A
 </param>
 <remarks></remarks>
</member>
<member name="E:DelinkNET.DevLinkNet.Devlink.CallLog_Event_S">
 <summary>
 S events are sent whenever a call is first created, and whenever any part of the call changes state.
 </summary>
 <param name="source">Sender Object</param>
 <param name="e"></param>
 IpPbx = A number used to identify the system. This is the user-supplied parameter used to connect to the IP Office system
 LogInfo = CallLogEvent_Type.CallLogEvent_S
 <remarks></remarks>
</member>
<member name="E:DelinkNET.DevLinkNet.Devlink.CallLog_Event_D">
 <summary>
 D events signify that the call is deleted.
 </summary>
 <param name="source">Sender Object</param>
 <param name="e">
 IpPbx = A number used to identify the system. This is the user-supplied parameter used to connect to the IP Office system
 LogInfo = CallLogEvent_Type.CallLogEvent_D
 </param>
 <remarks></remarks>
</member>
<member name="E:DelinkNET.DevLinkNet.Devlink.ConnectionStatus">
 <summary>
 Monitor connection status
 </summary>
 <param name="source">Sender Object</param>
 <param name="e">
 </param>
 <remarks></remarks>
</member>
<member name="M:DelinkNET.DevLinkNet.Devlink.StartMonitor(System.Int32,System.String,System.String)">
 <summary>
 Connect to Ip Office System
 </summary>
 <param name="idPbx">
 A number used to identify the system. This is a user-supplied parameter that must remain consistent across all calls
 to DevLink.
 </param>
 <param name="PbxAddress">
 The IP address of the IP Office system
 </param>
 <param name="pbxPassword">
 The password of the IP Office system.
 </param>
 <remarks></remarks>
</member>
<member name="M:DelinkNET.DevLinkNet.Devlink.StopMonitor(System.Int32)">
 <summary>
 Disconnect from an IP Office system.
 </summary>
 <param name="idPbx">
 A number used to identify the system. This is the user-supplied parameter used to connect to DevLink
 </param>
 <remarks></remarks>
</member>
<member name="T:DelinkNET.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DelinkNET.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DelinkNET.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
</members>
</doc>
